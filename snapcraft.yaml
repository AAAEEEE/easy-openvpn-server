name: easy-openvpn-server
title: Easy OpenVPN Server
version: "0.1"
summary: A dead-simple OpenVPN server.
description: | 
  A plug-and-play OpenVPN server that "Just Works" and has secure defaults.

  * By default, all the traffic of clients is sent over the VPN. Use this to securely connect to the internet, bust through firewalls and change your country.
  * You can also use it to connect clients securely to a remote network and configure it so that only the traffic to the remote network will go over the VPN.

  It supports both udp and tcp connections over IPv4 and IPv6. Clients will try the faster udp connection first. If that is blocked, they will fall back to a tcp connection that mimicks https traffic.

  It automatically generates `.ovpn` client config files that work on Linux, Mac and Windows, Android and iOS.

  **Getting Started**

  1. Install the snap on the server.

    ```bash
    sudo snap install easy-openvpn-server
    sudo snap connect easy-openvpn-server:network-control
    sudo snap connect easy-openvpn-server:firewall-control
    ```

  2. Copy the client config to your personal device.

    ```bash
    # Run this on the _server_ to create the config file.
    sudo easy-openvpn-server.show-client default > default.ovpn
    ```

    and from your device

    ```bash
    # Run this on the _client_ to download the config file.
    scp my-user@my-server:~/default.ovpn .
    ```

  3. Import the `.ovpn` config file into the VPN application of your device.

  By default, the VPN will advertise itself as the default gateway, meaning that **all the traffic of your device will be sent over the VPN**. This is useful to secure your internet access or to pretend you are in a different country.

  However, if you want to use the VPN to give users remote access to an internal network, you can run `sudo snap set easy-openvpn-server push-default-gateway=False`. This will make sure the VPN is only used for accessing resources on that internal network. Traffic from your device to the internet will not use the VPN in this mode.

  **Changing the public address**

  The snap will do its best to figure out what the public address of the server is. However, when that fails, you can manually set the public address.

  ```bash
  sudo snap set easy-openvpn-server public-address=example.com
  ```

  **Managing clients**

  The snap automatically creates a client profile and config with the name `default`. However, it's recommended to create a separate client profile for each user. This way, you can revoke the client profile when that user does not need access to the VPN anymore.

  ```bash
  # Add the client
  sudo easy-openvpn-server add-client alice
  # Get the client config
  sudo easy-openvpn-server show-client alice > alice.ovpn
  # Remove the client
  sudo easy-openvpn-server remove-client alice
  ```

license: Apache-2.0

base: core18
grade: stable
confinement: strict

passthrough:
  system-usernames:
    snap_daemon: shared

apps:
  tcp-server:
    daemon: simple
    command: usr/sbin/openvpn --config $SNAP_USER_DATA/tcp-server.conf --cd $SNAP_USER_DATA
    command-chain:
      - bin/run.sh
    plugs:
      - network
      - network-bind
      - network-control
      - firewall-control
    environment:
      LD_PRELOAD: "$SNAP/wraplib.so"
  udp-server:
    daemon: simple
    command: usr/sbin/openvpn --config $SNAP_USER_DATA/udp-server.conf --cd $SNAP_USER_DATA
    command-chain:
      - bin/run.sh
    plugs:
      - network
      - network-bind
      - network-control
      - firewall-control
    environment:
      LD_PRELOAD: "$SNAP/wraplib.so"
  status:
    command: bin/status.sh
  openvpn:
    command: usr/sbin/openvpn --config $SNAP_USER_DATA/tcp-server.conf --cd $SNAP_USER_DATA
    command-chain:
      - bin/run.sh
    plugs:
      - network
      - network-bind
      - network-control
      - firewall-control
    environment:
      LD_PRELOAD: "$SNAP/wraplib.so"
  easy-openvpn-server:
    command: bin/setup.py
    plugs:
      - network    
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8

hooks:
  configure:
    plugs:
      - network
      - network-control
  connect-plug-network-control: {}
  connect-plug-firewall-control: {}
  

parts:
  openvpn:
    plugin: nil
    stage-packages:
      - openvpn
      - iptables
      - libatm1
  scripts:
    plugin: dump
    source: scripts
    organize:
      "*": bin/
  scripts-dependencies:
    plugin: python
    source: easy-openvpn-server
    requirements:
      - requirements.txt 
    stage-packages:
      # Dependencies for building `cryptography` on non-amd64 systems.
      - libffi-dev
      - libssl-dev
  templates:
    plugin: dump
    source: templates
    organize:
      "*": templates/
  setgroups-patch:
    plugin: make
    source: setgroups-patch
    build-packages:
      - build-essential
