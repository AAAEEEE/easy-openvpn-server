{#
# Copyright (C) 2017  Ghent University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#}
# OpenVPN server configuration file generated by easy-openvpn-server
mode server
client-config-dir {{config_dir}}/client-configs
ca                {{config_dir}}/ca.crt
cert              {{config_dir}}/server.crt
key               {{config_dir}}/server.key
dh                {{config_dir}}/dh4096.pem
# TODO: add support for revoking certificates
# crl-verify        {{config_dir}}/crl.pem

# Authenticate the TLS channel with a PSK that is shared among all peers.
#  This is mostly to protect from DOS attacks. Traffic on the TLS channel
#  has a high crypto/cpu load. An attacker might send garbage traffic on this
#  channel to overload the cpu of the server. The PSK enables the server to
#  drop garbage traffic before doing crypto, this makes it hard to overload
#  the cpu by sending garbage traffic on the TLS channel. Note that this only
#  works against attackers that don't have the PSK, won't protect you from
#  an angry ex-employee.
tls-auth {{config_dir}}/ta.key
key-direction 0

# Support for status file is currently broken
# https://forum.snapcraft.io/t/system-usernames/13386/4?u=galgalesh
#
# status {{data_dir}}/openvpn-server1-status.log
# status-version 2

# After startup of the OpenVPN server, drop privileges to the `snap_daemon`
# user and group. This increases the security because it lowers the amount of
# damage a compromised OpenVPN server can do.
#
# Currently, only the `snap_daemon` user is supported by snapd.
# More info: https://snapcraft.io/docs/system-usernames
user snap_daemon
group snap_daemon
persist-tun
persist-key

# OpenVPN traffic on 443/tcp is almost never blocked because, since OpenVPN
# uses SSL, it's very hard to distinguish this traffic from "real" HTTPS
# traffic.
#
# Using udp as protocol is faster but many firewalls block it.
proto {{protocol}}
port {{port}}
# Use TLS for encryption
tls-server
# TLS versions <1.2 are vulnerable to many attacks.
tls-version-min 1.2
# Prefer the strong AES-256-GCM cipher but also allow slightly weaker ciphers
# to have more compatibility. (Although those ciphers are still very secure.)
#
# More info:
# - https://community.openvpn.net/openvpn/wiki/DeprecatedOptions#Policy:Migratingawayfromdeprecatedciphers
# - https://openvpn.net/vpn-server-resources/faq-regarding-openvpn-connect-android/
# - https://www.privateinternetaccess.com/helpdesk/kb/articles/what-s-the-difference-between-aes-cbc-and-aes-gcm
# - https://fedoraproject.org/wiki/Changes/New_default_cipher_in_OpenVPN
cipher AES-256-GCM
ncp-ciphers AES-256-GCM:AES-256-CBC:AES-128-GCM
# Use SHA256 for auth since the default SHA1 is insecure. This setting will
# be ignored when GCM is used (which uses SHA384)
auth SHA256

# Compress packets with lzo. lz4 is more efficient, but it's not compatible
# with OpenVPN versions <2.4.
compress lzo
# tun has lower traffic overhead than tap.
dev tun0
keepalive 10 60

# Accept connections on the external ip. We cannot leave this empty because
# then we have the chance that the vpn server will respond using a different
# interface than where it got the request from. The client does not like this.
# Another solution is to use multihome: https://community.openvpn.net/openvpn/ticket/442
# However, multihome has a slight performance drop, and we only put 1 IP in
# the client config file so "binding to all interfaces" is useless since the
# clients only know one interface.
local {{ext_ip}}
# Ip address to use for the tunnel
server {{tunnel_network}} {{tunnel_netmask}}

{% if duplicate_cn -%}
# Allow multiple simultaneous connections with the same certificate/key files.
duplicate-cn
{% endif %}

# We want to push to the clients
# - our DNS server
# - routes to the networks we know
{% if push_dns -%}
  push "dhcp-option DNS {{dns_server}}"
  {% for dns_search_domain in dns_search_domains -%}
  push "dhcp-option DOMAIN {{dns_search_domain}}"
  {% endfor %}
  # Make sure that clients route requests to our DNS server through us, even
  # when our DNS server isn't in one of the subnets we push.
  push "route {{dns_server}} 255.255.255.255"
{% endif %}
# Make sure clients route requests to our subnets through us.
{% for network in internal_networks -%}
  push "route {{network}}"
{% endfor %}
{% if push_default_gateway -%}
  push "redirect-gateway def1 bypass-dhcp"
{% endif %}

topology net30
